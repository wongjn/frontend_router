<?php

/**
 * @file
 * Provides support in the backend for a frontend router.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\EventSubscriber\AjaxResponseSubscriber;
use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
use Drupal\Core\Form\FormStateInterface;
use Drupal\frontend_router\EventSubscriber\FrontendRouterResponseSubscriber;

/**
 * Implements hook_js_settings_build().
 *
 * Sets values for the router, which needs ajaxPageState in drupalSettings.
 */
function frontend_router_js_settings_build(&$settings) {
  // Presence of frontendRouter is what the JS checks for to enable the router.
  $settings['frontendRouter'] = ['enabled' => TRUE];

  // Generate the theme value for ajaxPageState. This will also fill other
  // values for ajaxPageState.
  if (FrontendRouterResponseSubscriber::isRouted()) {
    // Provide the page with information about the theme that's used, so that
    // a later AJAX request can be rendered using the same theme.
    // @see \Drupal\Core\Theme\AjaxBasePageNegotiator
    $settings['ajaxPageState']['theme'] = \Drupal::theme()->getActiveTheme()->getName();
  }
}

/**
 * Implements hook_theme().
 */
function frontend_router_theme() {
  return [
    'router_fragment' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Prepares variables for router fragment templates.
 *
 * Default template: router-fragment.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #key, #children.
 */
function template_preprocess_router_fragment(array &$variables) {
  $element = $variables['element'];

  $variables['children'] = $element['#children'];
  $variables['key'] = $element['#key'];
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function frontend_router_preprocess_page(&$variables) {
  $theme_integrator = \Drupal::service('frontend_router.theme_integration');

  // Adds wrapper to fragment regions for JS to hook into.
  foreach ($theme_integrator->getFragmentRegions() as $region) {
    $variables['page'][$region]['#theme_wrappers']['router_fragment'] = [
      '#key' => $region,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK() for page--fragment.html.twig.
 */
function frontend_router_preprocess_page__fragment(&$variables) {
  $theme_integrator = \Drupal::service('frontend_router.theme_integration');

  // Filter only fragment regions.
  $variables['page'] = array_intersect_key(
    $variables['page'],
    array_flip($theme_integrator->getFragmentRegions())
  );
}

/**
 * Implements hook_preprocess_HOOK() for pager.html.twig.
 *
 * Removes router-related query parameters from pager links.
 */
function frontend_router_preprocess_pager(&$variables) {
  if (isset($variables['items'])) {
    foreach ($variables['items'] as $key => $item) {
      if ($key == 'pages') {
        foreach ($item as $index => $page) {
          if (!isset($page['href'])) {
            continue;
          }

          $variables['items'][$key][$index]['href'] = frontend_router_filter_query($page['href']);
        }
      }

      if (!isset($item['href'])) {
        continue;
      }

      $variables['items'][$key]['href'] = frontend_router_filter_query($item['href']);
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK() for html.
 */
function frontend_router_theme_suggestions_html() {
  if (FrontendRouterResponseSubscriber::isRouted()) {
    return ['html__fragment'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK() for page.
 */
function frontend_router_theme_suggestions_page() {
  if (FrontendRouterResponseSubscriber::isRouted()) {
    return ['page__fragment'];
  }
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function frontend_router_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $theme = $form_state->getBuildInfo()['args'][0];

  if (!$theme) {
    return;
  }

  $theme_integrator = \Drupal::service('frontend_router.theme_integration');

  $form['third_party_settings']['#tree'] = TRUE;
  $form['third_party_settings']['frontend_router'] = [
    '#type' => 'details',
    '#title' => t('Frontend Router'),
    'regions' => [
      '#type' => 'checkboxes',
      '#title' => t('Changable regions'),
      '#description' => t('Select the regions that will vary per page for the router to change.'),
      '#options' => system_region_list($theme, REGIONS_VISIBLE),
      '#default_value' => $theme_integrator->getFragmentRegions($theme),
    ],
  ];
}

/**
 * Removes router-related query parameters from a URL string.
 *
 * @param string $url
 *   The URL to filter query parameters from.
 *
 * @return string
 *   The filterred URl.
 */
function frontend_router_filter_query($url) {
  $parsed = UrlHelper::parse($url);
  $parsed['query'] = UrlHelper::filterQueryParameters($parsed['query'], [
    AjaxResponseSubscriber::AJAX_REQUEST_PARAMETER,
    MainContentViewSubscriber::WRAPPER_FORMAT,
    'ajax_page_state',
  ]);

  return $parsed['path'] . ($parsed['query'] ? ('?' . UrlHelper::buildQuery($parsed['query'])) : '');
}

/**
 * Implements hook_form_alter().
 */
function frontend_router_form_alter(&$form, FormStateInterface $form_state) {
  if (FrontendRouterResponseSubscriber::isRouted()) {
    // @todo match placeholder when a proper API is implemented. The placeholder
    //   uses a fixed string that is
    //   Crypt::hashBase64('Drupal\Core\Form\FormBuilder::prepareForm');
    $action_placeholder = 'form_action_p_pvdeGsVG5zNF_XLGPTvYSKCf43t8qZYSwcfZl2uzM';

    $form['#attached']['placeholders'][$action_placeholder]['#lazy_builder'] = [
      'frontend_router_render_form_action_placeholder',
      [],
    ];
  }
}

/**
 * Builds the $form['#action'] for routed form markup.
 *
 * @return array
 *   A renderable array representing the form action.
 */
function frontend_router_render_form_action_placeholder() {
  $build = \Drupal::formBuilder()->renderPlaceholderFormAction();
  $build['#markup'] = frontend_router_filter_query($build['#markup']);
  return $build;
}
